name: examen-question-two
on: push
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: checkout repo
        uses: actions/checkout@v3
        with: 
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ vars.DOCKER_USERNAME }}/my-image
  
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
  
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          annotations: ${{ steps.meta.outputs.annotations }}
          provenance: true
          sbom: true

      - run: npm install
      - run: npm run build

# source: https://docs.docker.com/guides/gha/

# # Vraag 2
# Gegeven de TypeScript-applicatie in bijlage, maak een workflow die zorgt dat ESLint (een checker voor de kwaliteit van code) wordt uitgevoerd en dat er daarna een Docker image wordt gebouwd voor de webpagina.
# Als je over NodeJS beschikt op je machine, heb je niets nodig dat nog niet mee in `package.json` en `package-lock.json` staat.
# Je hoeft zelf ook geen TypeScript code te schrijven.

# Voor de gebouwde image mag je `httpd:2.4` als basis nemen.
# De Dockerfile is heel eenvoudig.
# Deze image wordt naar je eigen Docker Hub account gepusht.

# In het geval ESLint een fout rapporteert, mag je de code aanpassen om de fout op te lossen.
# Voor elk van deze stappen mag je bestaande Actions gebruiken of zelf de `run` commando's schrijven.

# Om met Docker Hub te communiceren, gebruik je een access token.
# [Hier](https://docs.docker.com/security/for-developers/access-tokens/) wordt uitgelegd hoe je een token moet aanmaken.
# Dit mag niet zichtbaar zijn voor anderen die je repository bekijken!

# Tip: probeer alles eerst lokaal uit voor je er een worfklow van maakt.